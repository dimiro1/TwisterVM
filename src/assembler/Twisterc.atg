/*
 *   Copyright (C) 2009 by Claudemiro Alves Feitosa Neto
 *   <dimiro1@gmail.com>
 *   Modified: <2009-07-29 19:55:11 BRT>
 *
 *   This program is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program. If not, see <http://www.gnu.org/licences>
 */

#include "asm_gen.h"
#include <ctype.h>
#include <iostream>
using namespace std;

COMPILER Twisterc

	AsmGen *gen;

	CHARACTERS
		letter = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".
		digit = "0123456789".
		cr  = '\r'.
		tab = '\t'.
		lf = '\n'.
		noquote1 = ANY - "'" - cr - lf.
		noquote2 = ANY - '"' - cr - lf.

	TOKENS
		ID = letter {letter | digit | "-" | "_"}.
		NUM = digit {digit} ["." digit {digit}] [("e"|"E") ["-"|"+"] digit {digit}].
		STRING = ("'" {noquote1} "'" | '"' {noquote2} '"'). /* permitida string vazia. */

	COMMENTS FROM "#" TO lf

	IGNORE cr + tab + lf

	PRODUCTIONS
		Twisterc = [OptionsSection] CodeSection.

		OptionsSection = ".options"
							   {OptionsOptionsSection}
						  ".end".

		OptionsOptionsSection = ".name" ID
									 (. gen->set_output_file_name (coco_string_create_char (t->val)); .)
							  .

		CodeSection = ".main"
						  {CodeInstruction}
					  ".end".

                                 // opcode        A           B          C
		CodeInstruction (. int A, B, C; string label_name; gen->inc_code_line (); .)
                                = "abs_n"     Register<A> Register<C>
                                      (. gen->add_instruction (OP_ABS_N, A, C); .)
								| "acos_n"	  Register<A> Register<C>
                                      (. gen->add_instruction (OP_ACOS_N, A, C); .)
								| "add_n"	  Register<A> Register<B> Register<C>
                                      (. gen->add_instruction (OP_ADD_N, A, B, C); .)
								| "asin_n"	  Register<A> Register<C>
                                      (. gen->add_instruction (OP_ASIN_N, A, C); .)
								| "atan_n"	  Register<A> Register<C>
                                      (. gen->add_instruction (OP_ATAN_N, A, C); .)
								| "ceil_n"	  Register<A> Register<C>
                                      (. gen->add_instruction (OP_CEIL_N, A, C); .)
								| "cos_n"	  Register<A> Register<C>
                                      (. gen->add_instruction (OP_COS_N, A, C); .)
								| "dec_n"     Register<A>
                                      (. gen->add_instruction (OP_DEC_N, A); .)
								| "div_n"	  Register<A> Register<B> Register<C>
                                      (. gen->add_instruction (OP_DIV_N, A, B, C); .)
								| "floor_n"	  Register<A> Register<C>
                                      (. gen->add_instruction (OP_FLOOR_N, A, C); .)
								| "inc_n"     Register<A>
                                      (. gen->add_instruction (OP_INC_N, A); .)
								| "log_n"	  Register<A> Register<C>
                                      (. gen->add_instruction (OP_LOG_N, A, C); .)
								| "mod_n"	  Register<A> Register<B> Register<C>
                                      (. gen->add_instruction (OP_MOD_N, A, B, C); .)
								| "mult_n"	  Register<A> Register<B> Register<C>
                                      (. gen->add_instruction (OP_MULT_N, A, B, C); .)
								| "neg_n"	  Register<A>
                                      (. gen->add_instruction (OP_NEG_N, A); .)
								| "pow_n"	  Register<A> Register<B> Register<C>
                                      (. gen->add_instruction (OP_POW_N, A, B, C); .)
								| "sin_n"	  Register<A> Register<C>
                                      (. gen->add_instruction (OP_SIN_N, A, C); .)
								| "sqrt_n"	  Register<A> Register<C>
                                      (. gen->add_instruction (OP_SQRT_N, A, C); .)
								| "sub_n"	  Register<A> Register<B> Register<C>
                                      (. gen->add_instruction (OP_SUB_N, A, B, C); .)
								| "tan_n"	  Register<A> Register<C>
                                      (. gen->add_instruction (OP_TAN_N, A, C); .)
								| "rand_n"	  Register<C>
                                      (. gen->add_instruction (OP_RAND_N, NULL, C); .)
                                | "goto"      Label<label_name>
                                      (. gen->add_label (label_name);
                                         gen->add_instruction (OP_GOTO, label_name); .)
                                | "halt"
                                      (. gen->add_instruction (OP_HALT); .)
                                | "nop"
                                      (. gen->add_instruction (OP_NOP); .)
                                | "system_s"  Register<A>
							          (. gen->add_instruction (OP_SYSTEM_S, A); .)
                                | "getenv_s"  Register<A> Register<C>
							          (. gen->add_instruction (OP_GETENV_S, A, C); .)
                                | "input_n"   Register<C>
                                      (. gen->add_instruction (OP_INPUT_N, NULL, C); .)
                                | "input_s"   Register<A>
                                      (. gen->add_instruction (OP_INPUT_S, NULL, C); .)
                                | "print_n"   Register<A>
                                      (. gen->add_instruction (OP_PRINT_N, A); .)
								| "print_s"	  Register<A>
                                      (. gen->add_instruction (OP_PRINT_S, A); .)
								| "put_n"	  Register<A>
                                      (. gen->add_instruction (OP_PUT_N, A); .)
								| "put_s"	  Register<A>
                                      (. gen->add_instruction (OP_PUT_S, A); .)
								| "mov_n"	  Register<A>			  Register<C>
                                      (. gen->add_instruction (OP_MOV_N, A, C); .)
								| "mov_s"	  Register<A>			  Register<C>
                                      (. gen->add_instruction (OP_MOV_S, A, C); .)

                                | "store_n" (. double n; int index; .)  NUM
                                      (. n = atof (coco_string_create_char (t->val));
                                         index = gen->add_num (n); .)
                                                                      Register<C>
                                      (. gen->add_instruction (OP_STORE_N, index, C); .)

                                | "store_s" (. int index; .) STRING
                                      (. index = gen->add_string (string (coco_string_create_char (t->val))); .)
                                                                     Register<C>
                                      (. gen->add_instruction (OP_STORE_S, index, C); .)

                                | "concat_s"  Register<A> Register<B> Register<C>
                                      (. gen->add_instruction (OP_CONCAT_S, A, B, C); .)
                                | "charat_s"  Register<A> NUM
                                      (. gen->add_instruction (OP_CHARAT_S, A, 1); .)
                                | "lt_s"  Register<A> Register<B> Label<label_name>
                                      (. gen->add_label (label_name);
                                         gen->add_instruction (OP_LT_S, A, B, label_name); .)
                                | "gt_s"  Register<A> Register<B> Label<label_name>
                                      (. gen->add_label (label_name);
                                         gen->add_instruction (OP_GT_S, A, B, label_name); .)
                                | "lte_s" Register<A> Register<B> Label<label_name>
                                      (. gen->add_label (label_name);
                                         gen->add_instruction (OP_LTE_S, A, B, label_name); .)
                                | "gte_s" Register<A> Register<B> Label<label_name>
                                      (. gen->add_label (label_name);
                                         gen->add_instruction (OP_GTE_S, A, B, label_name); .)
                                | "eq_s"  Register<A> Register<B> Label<label_name>
                                      (. gen->add_label (label_name);
                                         gen->add_instruction (OP_EQ_S, A, B, label_name); .)
                                | "lt_n"  Register<A> Register<B> Label<label_name>
                                      (. gen->add_label (label_name);
                                         gen->add_instruction (OP_LT_N, A, B, label_name); .)
                                | "gt_n"  Register<A> Register<B> Label<label_name>
                                      (. gen->add_label (label_name);
                                         gen->add_instruction (OP_GT_N, A, B, label_name); .)
                                | "lte_n" Register<A> Register<B> Label<label_name>
                                      (. gen->add_label (label_name);
                                         gen->add_instruction (OP_LTE_N, A, B, label_name); .)
                                | "gte_n" Register<A> Register<B> Label<label_name>
                                      (. gen->add_label (label_name);
                                         gen->add_instruction (OP_GTE_S, A, B, label_name); .)
                                | "eq_n"  Register<A> Register<B> Label<label_name>
                                      (. gen->add_label (label_name);
                                         gen->add_instruction (OP_EQ_N, A, B, label_name); .)
                                | "not_lt_s"  Register<A> Register<B> Label<label_name>
                                      (. gen->add_label (label_name);
                                         gen->add_instruction (OP_NOT_LT_S, A, B, label_name); .)
                                | "not_gt_s"  Register<A> Register<B> Label<label_name>
                                      (. gen->add_label (label_name);
                                         gen->add_instruction (OP_NOT_GT_S, A, B, label_name); .)
                                | "not_lte_s" Register<A> Register<B> Label<label_name>
                                      (. gen->add_label (label_name);
                                         gen->add_instruction (OP_NOT_LTE_S, A, B, label_name); .)
                                | "not_gte_s" Register<A> Register<B> Label<label_name>
                                      (. gen->add_label (label_name);
                                         gen->add_instruction (OP_NOT_GTE_S, A, B, label_name); .)
                                | "not_eq_s"  Register<A> Register<B> Label<label_name>
                                      (. gen->add_label (label_name);
                                         gen->add_instruction (OP_NOT_EQ_S, A, B, label_name); .)
                                | "not_lt_n"  Register<A> Register<B> Label<label_name>
                                      (. gen->add_label (label_name);
                                         gen->add_instruction (OP_NOT_LT_N, A, B, label_name); .)
                                | "not_gt_n"  Register<A> Register<B> Label<label_name>
                                      (. gen->add_label (label_name);
                                         gen->add_instruction (OP_NOT_GT_N, A, B, label_name); .)
                                | "not_lte_n" Register<A> Register<B> Label<label_name>
                                      (. gen->add_label (label_name);
                                         gen->add_instruction (OP_NOT_LTE_N, A, B, label_name); .)
                                | "not_gte_n" Register<A> Register<B> Label<label_name>
                                      (. gen->add_label (label_name);
                                         gen->add_instruction (OP_NOT_GTE_N, A, B, label_name); .)
                                | "not_eq_n"  Register<A> Register<B> Label<label_name>
                                      (. gen->add_label (label_name);
                                         gen->add_instruction (OP_NOT_EQ_N, A, B, label_name); .)
                                | "zero_n"  Register<A> Label<label_name>
                                      (. gen->add_label (label_name);
                                         gen->add_instruction (OP_ZERO_N, A, label_name); .)
                                | "not_zero_n"  Register<A> Label<label_name>
                                      (. gen->add_label (label_name);
                                         gen->add_instruction (OP_NOT_ZERO_N, A, label_name); .)
                                | LabelDec<label_name> (. gen->dec_code_line ();
                                                          gen->add_label (label_name, true); .)
						        .

        Label<string &label_name> = ID
                    (. label_name = string (coco_string_create_char(t->val)); .).
        LabelDec<string &label_name> = ID
                    (. label_name = string (coco_string_create_char(t->val)); .) ":".

		Register<int &n>= "$" NUM
                        (. n =  atoi (coco_string_create_char (t->val)); .).
END Twisterc.

